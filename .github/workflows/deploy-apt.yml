name: Deploy APT Repo
on:
  push:
    branches:
      - prod
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y reprepro dpkg-dev debhelper gnupg curl
      - name: Import GPG key
        env:
          APT_GPG_PRIVATE_KEY: ${{ secrets.APT_GPG_PRIVATE_KEY }}
          APT_GPG_PASSPHRASE: ${{ secrets.APT_GPG_PASSPHRASE }}
        run: |
          echo "$APT_GPG_PRIVATE_KEY" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      - name: Compute version
        id: version
        run: |
          VERSION="1.0-$(date +%Y%m%d%H%M)-${GITHUB_SHA::7}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
      - name: Build .deb
        run: |
          VERSION="1.0-$(date +%Y%m%d%H%M)-${GITHUB_SHA::7}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          dpkg-deb --build debian/bashrc-script-custom bashrc-script-custom_${VERSION}_all.deb
      - name: Check if .deb changed
        id: check
        run: |
          NEW_HASH=$(sha256sum bashrc-script-custom_${VERSION}_all.deb | awk '{print $1}')
          echo "NEW_HASH=$NEW_HASH" >> $GITHUB_ENV
          if [ -f last_deb_hash.txt ]; then
            OLD_HASH=$(cat last_deb_hash.txt)
            if [ "$NEW_HASH" = "$OLD_HASH" ]; then
              echo "no_change=true" >> $GITHUB_ENV
            else
              echo "no_change=false" >> $GITHUB_ENV
            fi
          else
            echo "no_change=false" >> $GITHUB_ENV
          fi
      - name: Deploy APT repo
        if: env.no_change == 'false'
        run: |
          # Création des dossiers du repo
          mkdir -p apt-repo/{conf,dists,db,pool}

          # Configuration GPG pour loopback
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          export GPG_TTY=$(tty)

          # Création du fichier distributions
          cat <<EOF > apt-repo/conf/distributions
          Origin: Moon
          Label: MoonRepo
          Codename: stable
          Architectures: amd64 source all
          Components: main
          Description: Moon's custom Debian repo
          SignWith: 3EDB17B20A46A78C68EAD27DC1A50F4F29EFDE91
          EOF

          # Inclusion du .deb
          reprepro -b apt-repo includedeb stable bashrc-script-custom_${VERSION}_all.deb

          # Export de la clé publique pour les utilisateurs
          gpg --armor --export gael.rothlin@proton.me > apt-repo/public.key
          
          # Forcer l’export pour mettre à jour les indices
          reprepro -b apt-repo export
      - name: Deploy to GitHub Pages
        if: env.no_change == 'false'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apt-repo
      - name: Save last .deb hash
        if: env.no_change == 'false'
        run: |
          echo "$NEW_HASH" > last_deb_hash.txt
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git add last_deb_hash.txt
          git commit -m "Update last_deb_hash.txt"
          git push origin prod